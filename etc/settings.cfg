; ------------------------------------------------------------------------------------------
; Application configuration file formatted as RFC822 standard
; ------------------------------------------------------------------------------------------


[Alignak-WebUI]
; Application debug mode
; ------------------------------------------------------------------------------------------
; Set to '1' to activate debug mode for the application
; This to allow Bottle server to run in debug mode (only interesting for developers)
; debug=1


; Application UI design
; ------------------------------------------------------------------------------------------
; Preparing the next Bootstrap version ...
; Set to '1' to use Bootstrap 4 instead of Bootstrap 3
; Note that currently, the UI will be broken !!! Bootstrap 4 is still an alpha version :)
;bootstrap4=1


; User authentication:
; ------------------------------------------------------------------------------------------
; # Alignak backend endpoint
; # Configure this value to change the default backend configuration
; Default is http://127.0.0.1:5000
; alignak_backend = http://127.0.0.1:5000


; Alignak information:
; ------------------------------------------------------------------------------------------
; # Alignak arbiter endpoint
; # Configure this value to get information from the Alignak Arbiter
; Default is http://127.0.0.1:8888
; alignak_arbiter = http://127.0.0.1:8888
alignak_arbiter = http://demo.alignak.net:8888


; # Web server configuration
; ------------------------------------------------------------------------------------------
; Default is listening on TCP port 5001 on local loop interface
; host=127.0.0.1
; port=5001


; # WebUI information (about application modal)
; ------------------------------------------------------------------------------------------
; Overload default information included in the WebUI
; about_name=Alignak-WebUI
; about_version=0.50.3
; about_copyright=2015-2016 - Alignak team
; about_release=
; about_url=
; about_doc=


; # Login form
; ------------------------------------------------------------------------------------------
; Welcome text in the login form.
; Default is:
; Welcome<br> Log-in to use the application
; login_text=Welcome<br> Log-in to use the application

; Application logo in the login form
; Default logo is: /static/images/alignak_white_logo.png
; Uncomment this line if you wish to use a blue version of the alignak logo, else specify your url
;app_logo=/static/images/alignak_blue_logo.png

; # Navigation bar
; ------------------------------------------------------------------------------------------
; Defined Css is:
; .navbar-brand img {
; height: 100%;
; padding: 3px;
; background-color: rgba(255,255,255,0.8);
; border-radius: 5px;
; }
; You can change this default Css in this configuration variable
; Uncomment this line if you wish to use the alignak blue logo, else specify your Css
; app_logo_css=    background-color: rgba(255,255,255,0.8); border-radius: 5px;
; Default logo title
app_logo_title=Alignak Web User interface


; # Footer bar
; ------------------------------------------------------------------------------------------
; WebUI logo in the footer bar
; webui_logo property is a full URL
; Default logo is: /static/images/logo_webui_xxs.png
; To remove the logo in the page footer, set this property as empty
;webui_logo=/static/images/logo_webui_xxs.png
;webui_logo=


; # Application layout
; ------------------------------------------------------------------------------------------
; Play sound
; Default is no sound
; play_sound=no
play_sound=yes

; Refresh period
; Number of seconds between each page refresh
; Default value is 60 seconds
; Use 0 to disable refresh
; refresh_period = 60

; Header refresh period
; Number of seconds between each header refresh
; Default value is 30 seconds
; Use 0 to disable header refresh
; header_refresh_period = 30


; # WebUI localization / internationalization
; ------------------------------------------------------------------------------------------
; Not yet localized ...

; Preferred locales (default is en_US)
; locale = fr_FR


; # WebUI timezone (default is Europe/Paris)
; ------------------------------------------------------------------------------------------
; Preferred TZ, default is Europe/Paris
; timezone=Europe/Paris
; Preferred date time formatting, default is %Y-%m-%d %H:%M:%S
; timeformat=%Y-%m-%d %H:%M:%S
; timeformat=%d/%m/%Y %H:%M:%S


; # External application configuration
; ------------------------------------------------------------------------------------------
; Thoses parameters allow configuration of the external access by a third-party application
; CORS Access-Control-Allow-Origin; default is to allow only localhost access
; cors_acao=http://127.0.0.1


; Grafana configuration
; ------------------------------------------------------------------------------------------
; Configure this value to activate the Grafana panels when available in the WebUI
; Set the Grafana application URL (same as the one defined in the Alignak backend configuration)
; Default is '' (no Grafana panels)
;grafana = http://127.0.0.1:3030
; Important note: currently it is not possible to embed Grafana panels in the WebUI without any
; former user authentication on the Grafana application with the Web browser used for the WebUI
; With this authentication, Grafana will store cookies to allow embedding the panels

[logs]
; Application log files
; ------
; The application builds a log file
; Parameters in this section allow to configure logs file rotation
; ------

# CRITICAL  50
# ERROR     40
# WARNING   30
# INFO      20
# DEBUG     10
# Default is INFO (20)
; level = 20

# Application logs directory
# Default is /usr/local/var/log/alignak-webui
# Set this variable if you want to use another folder
; dir = .

# Application log filename
# Default is application name + log extension (alignak-webui.log)
# Set this variable if you want to use another file name
; filename = webui.log

# Rotation period (D for day, W0...W6 for a week day, or midnight)
# Default is to have a log rotation on midnight...
; when = midnight

# Rotation period interval
# ... every day...
; interval = 1

# Number of backup files before deletion (0 to disable deletion)
# ... and keep files for a week
; backup = 6

; ------------------------------------------------------------------------------------------
; Specific elements configuration
; ------------------------------------------------------------------------------------------
; The item section defines the parameters common to all elements
; The session section defines the parameters specific for the session, and so on ...
; If a section does not exist the corresponding item or item. section is used in place.
; --------
; Element state is built with 2 templates:
; - content
; - back
; - front
; In each template a substitution is made with the live values.
; ##class## is replaced with the item livestate ... to be used as a class defined in the CSS file
; See items_states.css for the classes definition. Class is defined with an 'item_' prefix:
; 'item_active' is the class used for the active state.
;
; ##type## is the item type
; ##name## is the item name
; ##id## is the item id
; ------------------------------------------------------------------------------------------
[buttons]
; Do not remove those variables!
; They MUST be present in the configuration file!
; Global element to be included in the HTML
livestate_commands: <div class="btn-group btn-group-xs btn-group-raised" role="group" data-type="actions" title="##title##">##commands##</div>
; Each command element to be included in the HTML
livestate_command: <button class="btn btn-default" data-type="action" data-action="##action##" data-toggle="tooltip" data-placement="top" title="##title##" data-element_type="##type##" data-name="##name##" data-element="##id##" ##disabled##><i class="fa fa-##icon##"></i></button>

[tables.lists]
; Do not remove those variables!
; They MUST be present in the configuration file!
; Button to display the list
button=<button class="btn btn-xs btn-raised" data-toggle="collapse" data-target="#list_##type##_##id##" aria-expanded="false">##title##</button><div class="collapse" id="list_##type##_##id##">##content##</div>
; Global element to be included in the HTML for the list
list=<ul class="list-group">##content##</ul>
; Each command element to be included in the HTML list
item=<li class="list-group-item"><span class="fa fa-check">&nbsp;##content##</span></li>
; Unique element to be included in the HTML list if the list contains only one element
unique=##content##

[items]
; Do not remove those variables!
; They MUST be present in the configuration file!
content: <div class="item-state ##class## ##state##" style="display: inline; font-size:0.9em;" data-item-id="##id##" data-item-name="##name##" data-item-type="##type##" data-item-state="##state##" title="##title####extra##">
            <span class="fa-stack ##size##" ##opacity##>##back####front##</span>
            <span>##text##</span>
         </div>

back: <i class="fa fa-circle fa-stack-2x ##class##"></i>
front: <i class="fa fa-##icon## fa-stack-1x fa-inverse"></i>

badge:  <span class="item-badge ##class## ##state##" data-item-id="##id##" data-item-type="##type##">
            <span class="fa-stack" title="##title##">
                <i class="fa fa-stack-2x fa-circle"></i>
                <i class="fa fa-stack-1x fa-##icon## ##extra##"></i>
            </span>
        </span>


; Default states: open/close/active/inactive/unknown
; Do not remove the following [items.item.*] sections unless you are sure about it!
[items.item.unknown]
class: unknown
text: Unknown
icon: question

[items.item.open]
class: open
text: Opened
icon: check

[items.item.close]
class: close
text: Closed
icon: close

[items.item.active]
class: active
text: Active
icon: check

[items.item.inactive]
class: inactive
text: Inactive
icon: close

; Host: up/down/unreachable
; Host live state: from the monitoring framework
[items.host.up]
class: host_up
text: Host is up
icon: server

[items.host.down]
class: host_down
text: Host is down
icon: server

[items.host.unreachable]
class: host_unreachable
text: Host is unreachable
icon: server


[items.host.unknown]
class: host_unknown
text: Host is unknown
icon: server

; Host real state: computed from host and its services live states
[items.host.ok]
class: host_ok
text: Host is up and all its services are ok or acknowledged
icon: cubes

[items.host.warning]
class: host_warning
text: Host or some of its services are warning or state are unknown
icon: cubes

[items.host.critical]
class: host_critical
text: text: Host or some of its services are critical
icon: cubes

[items.host.acknowledged]
class: host_acknowledged
text: Host or some of its services are problems but acknowledged
icon: cubes

[items.host.in_downtime]
class: host_in_downtime
text: Host or some of its services are in a downtime period
icon: cubes


; Service: ok/warning/critical/unknown/unreachable
[items.service.ok]
class: service_ok
text: Service is ok or problem is handled
icon: cube

[items.service.critical]
class: service_critical
text: Service is critical
icon: cube

[items.service.warning]
class: service_warning
text: Service is warning
icon: cube

[items.service.unknown]
class: service_unknown
text: Service is unknown
icon: question

[items.service.unreachable]
class: service_unreachable
text: Service is unreachable
icon: question

[items.service.acknowledged]
class: service_acknowledged
text: Service is problem and acknowledged
icon: check

[items.service.in_downtime]
class: service_in_downtime
text: Service is in a scheduled downtime
icon: ambulance


; logcheckresult Host: up/down/unreachable
[items.logcheckresult.up]
class: logcheckresult_up
text: Host is up
icon: check

[items.logcheckresult.down]
class: logcheckresult_down
text: Host is down
icon: close

[items.logcheckresult.unreachable]
class: logcheckresult_unreachable
text: Host is unreachable
icon: question

[items.logcheckresult.unknown]
class: logcheckresult_unknown
text: Element is unknown
icon: question

[items.logcheckresult.acknowledged]
class: logcheckresult_acknowledged
text: Element is problem and acknowledged
icon: check

[items.logcheckresult.in_downtime]
class: logcheckresult_in_downtime
text: Element is in a scheduled downtime
icon: ambulance

; Service: ok/warning/critical
[items.logcheckresult.ok]
class: logcheckresult_ok
text: Service is ok
icon: check

[items.logcheckresult.critical]
class: logcheckresult_critical
text: Service is critical
icon: close

[items.logcheckresult.warning]
class: logcheckresult_warning
text: Service is warning
icon: question


; History
[items.history.check_result]
class: historyCheckResult
text: Check result
icon: bolt
[items.history.check_request]
class: historyCheckRequest
text: Check request
icon: send
[items.history.check_requested]
class: historyCheckRequested
text: Check requested
icon: reply

[items.history.ack_add]
class: historyAckAdd
text: Request to add an acknowledge
icon: send
[items.history.ack_processed]
class: historyAckProcessed
text: Acknowledge set
icon: reply
[items.history.ack_delete]
class: historyAckDelete
text: Request to delete an acknowledge
icon: trash

[items.history.downtime_add]
class: historyDowntimeAdd
text: Request to add a downtime
icon: send
[items.history.downtime_processed]
class: historyDowntimeProcessed
text: Downtime set
icon: reply
[items.history.downtime_delete]
class: historyDowntimeDelete
text: Request to delete a downtime
icon: trash

; Commands
[items.command.unknown]
class: command
text:
icon: bolt

; Timeperiods
[items.timeperiod.unknown]
class: timeperiod
text:
icon: calendar

; User states: unknown only! Needs refactoring user/user ...
[items.user.unknown]
class: user
text:
icon: user

; Users groups
[items.usergroup.unknown]
class: usergroup
text:
icon: users

; Hosts groups
; Real state is computed from the real state of the group members
[items.hostgroup.unknown]
class: hostgroup_unknown
text: Hosts group do not have any members.
icon: server
[items.hostgroup.ok]
class: hostgroup_ok
text: All hosts group members are ok
icon: server
[items.hostgroup.acknowledged]
class: hostgroup_acknowledged
text: Hosts group worst state is Acknowledge. At least an host or service is an acknowledeged problem.
icon: check
[items.hostgroup.in_downtime]
class: hostgroup_in_downtime
text: Hosts group worst state is Downtime. At least an host or service is in a scheduled downtime.
icon: ambulance
[items.hostgroup.warning]
class: hostgroup_warning
text: Hosts group worst state is Warning. Some hosts are unreachable and/or some services are warning.
icon: server
[items.hostgroup.critical]
class: hostgroup_critical
text: Hosts group worst state is Critical. Some hosts are down and/or some services are critical.
icon: server

; Services groups
[items.servicegroup.unknown]
class: servicegroup
text:
icon: cubes

; Realms
; Real state is computed from the real state of the realm hosts
[items.realm.unknown]
class: realm
text: Realm do not have any members
icon: sitemap
[items.realm.ok]
class: realm_ok
text: All realm hosts are ok
icon: sitemap
[items.realm.acknowledged]
class: realm_acknowledged
text: Realm worst state is Acknowledge. At least an host or service is an acknowledeged problem.
icon: check
[items.realm.in_downtime]
class: realm_in_downtime
text: Realm worst state is Downtime. At least an host or service is in a scheduled downtime.
icon: ambulance
[items.realm.warning]
class: realm_warning
text: Realm worst state is Warning. Some hosts are unreachable and/or some services are warning.
icon: sitemap
[items.realm.critical]
class: realm_critical
text: Realm worst state is Critical. Some hosts are down and/or some services are critical.
icon: sitemap

; Alignak daemons
[items.daemon.up]
class: daemon_up
text: Daemon is up and listening
icon: tty

[items.daemon.down]
class: daemon_down
text: Daemon is down
icon: tty

[items.daemon.unreachable]
class: daemon_unreachable
text: Daemon is unreachable
icon: tty
